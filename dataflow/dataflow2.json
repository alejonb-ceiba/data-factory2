{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestResource1",
						"type": "DatasetReference"
					},
					"name": "sourceApiAlejo"
				},
				{
					"dataset": {
						"referenceName": "SqlServerLu",
						"type": "DatasetReference"
					},
					"name": "sourceBdXMLu"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SqlServerLuData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SqlServerLu",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ObtenerRegistrosIndicador9"
				},
				{
					"name": "OrdenarPorFecha"
				},
				{
					"name": "window1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (numeroPagina as boolean, tamanoPagina as short, totalRegistros as short, valores as (activoDesde as string, fechaCreacion as string, fechaModificacion as string, idParametro as string, idVigenciaParametro as string, valor as double, vigenteDesde as string, vigenteHasta as string)[]),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     headers: ['Authorization' -> 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImEyWm9IcVVBYkU2cHl6enR5RTZka1JGQmVoRTd2RFJERUEyRWloUGVaUWsiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpc3MiOiJodHRwczovL2IyY2JpYmNvbXB0cmFuc3NnZGxsLmIyY2xvZ2luLmNvbS9hMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQvdjIuMC8iLCJleHAiOjE3MzMzNDcwMzEsIm5iZiI6MTczMzM0MzQzMSwibmFtZSI6InVua25vd24iLCJ0aWQiOiJhMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQiLCJpc19leHRlcm5hbCI6ZmFsc2UsImF6cGFjciI6IjEiLCJzdWIiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJvaWQiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJ2ZXIiOiIyLjAiLCJhenAiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpYXQiOjE3MzMzNDM0MzF9.kT5GezAoP0at2o1fRWCoPHV6hPBpxtCQoUNoayKs2PzFqGKJ6l6GNVE8YLOXJ5hOV8eLdxUpM6iTplv7FpkShKfYKmXiSTlCCa-xRo1O7O3IgDhV8Xjf_uARJD2_JNBUM6GHcV7MG-DU1Cr9nwWCn63HHgYP1-pW4HPOhT8gp2dFqrKI9vzMXIvj1xv5VDp5XJ2HMFUR_1wOctUORTzIqDlnFy_G65F4BV5_l-0f_2lzNnYe5ym00nlWuShK0-ndVpZq4NR6sre1_ZaWKC9VhuEGCT8H6n8rqvTLY4WH4sLaVE_vZikkMDtJW4eh58bgbmk0Pc6dyV8BSe6vY6f5yA', 'User-Agent' -> 'insomnia/10.2.0', 'Cookie' -> 'ARRAffinity=ad26f9a6bd8a60cc0a709ea5aba83deeee69ecdeb9e8ed99f43a1cd50f09889a; ARRAffinitySameSite=ad26f9a6bd8a60cc0a709ea5aba83deeee69ecdeb9e8ed99f43a1cd50f09889a'],",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> sourceApiAlejo",
				"source(output(",
				"          ID as integer,",
				"          Fecha as date,",
				"          Valor as decimal(10,2),",
				"          Consecutivo as integer,",
				"          Indicador as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceBdXMLu",
				"sourceBdXMLu filter(Indicador == 9) ~> ObtenerRegistrosIndicador9",
				"ObtenerRegistrosIndicador9 sort(desc(Fecha, true)) ~> OrdenarPorFecha",
				"OrdenarPorFecha window(desc(Fecha, true),",
				"     numero_fila = rowNumber()) ~> window1",
				"filter1 select(mapColumn(",
				"          Fecha",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"window1 filter(numero_fila == 1) ~> filter1",
				"sourceApiAlejo foldDown(unroll(body.valores),",
				"     mapColumn(",
				"          valores = body.valores",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(ultimo_dia_mes = lastDayOfMonth(toDate(valores.vigenteDesde)),",
				"          mes := toDate(valores.vigenteDesde)) ~> derivedColumn1",
				"derivedColumn1 filter(ultimo_dia_mes == toDate(valores.vigenteDesde)) ~> filter2",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Dato as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Dato = ultimo_dia_mes",
				"     )) ~> sink1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Fecha as date,",
				"          Valor as decimal(10,2),",
				"          Consecutivo as integer,",
				"          Indicador as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}