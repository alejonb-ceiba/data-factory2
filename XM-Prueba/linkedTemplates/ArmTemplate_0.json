{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "XM-Prueba"
		},
		"Xm_database_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Xm_database'"
		},
		"alejobd_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'alejobd'"
		},
		"RestServiceAlejo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://appparametrosfake-gkbybbe7hcgne9c2.canadacentral-01.azurewebsites.net"
		},
		"Xm_database_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "xmserverdb.database.windows.net"
		},
		"Xm_database_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "XM_Database"
		},
		"Xm_database_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "xmadmin"
		},
		"alejobd_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "45.169.253.67,8358"
		},
		"alejobd_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "db_alejo"
		},
		"alejobd_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "alejo"
		},
		"DiaHabil_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://appparametrosfake-gkbybbe7hcgne9c2.canadacentral-01.azurewebsites.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceAlejo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceAlejo_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Xm_database')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('Xm_database_properties_typeProperties_server')]",
					"database": "[parameters('Xm_database_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('Xm_database_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Xm_database_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/alejobd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('alejobd_properties_typeProperties_server')]",
					"database": "[parameters('alejobd_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('alejobd_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('alejobd_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DiaHabil')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('DiaHabil_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceAlejo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/Parametros/valoresTCRM"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceAlejo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerLu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Xm_database",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fecha",
						"type": "date"
					},
					{
						"name": "Valor",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "Consecutivo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Indicador",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Valores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Xm_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerLuData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Xm_database",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Dato",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TemporalData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Xm_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "alejobd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "A302INDICADOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "A302FECHA",
						"type": "date"
					},
					{
						"name": "A302VALOR",
						"type": "varchar"
					},
					{
						"name": "A302CONSECUTIVO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "BASICAS",
					"table": "T302VALORESINDICADORES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/alejobd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/XmDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Xm_database",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fecha",
						"type": "date"
					},
					{
						"name": "Valor",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "Consecutivo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Indicador",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ValoresCopia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Xm_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Festivos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DiaHabil",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/Festivos/ultimo-dia-habil/CO"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DiaHabil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "XmDatabase",
								"type": "DatasetReference"
							},
							"name": "valoresIndicadores"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "XmDatabase",
								"type": "DatasetReference"
							},
							"name": "valoresCopia"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Fecha as date,",
						"          Valor as decimal(10,2),",
						"          Consecutivo as integer,",
						"          Indicador as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> valoresIndicadores",
						"valoresIndicadores sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Fecha as date,",
						"          Valor as decimal(10,2),",
						"          Consecutivo as integer,",
						"          Indicador as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> valoresCopia"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/XmDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "sourceApiAlejo"
						},
						{
							"dataset": {
								"referenceName": "SqlServerLu",
								"type": "DatasetReference"
							},
							"name": "sourceBdXMLu"
						},
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerLuData",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SqlServerLu",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "ObtenerRegistrosIndicador9"
						},
						{
							"name": "OrdenarPorFecha"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "externalCall1",
							"linkedService": {
								"referenceName": "DiaHabil",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "createUrl"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (numeroPagina as boolean, tamanoPagina as short, totalRegistros as short, valores as (activoDesde as string, fechaCreacion as string, fechaModificacion as string, idParametro as string, idVigenciaParametro as string, valor as double, vigenteDesde as string, vigenteHasta as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     headers: ['Authorization' -> 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImEyWm9IcVVBYkU2cHl6enR5RTZka1JGQmVoRTd2RFJERUEyRWloUGVaUWsiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpc3MiOiJodHRwczovL2IyY2JpYmNvbXB0cmFuc3NnZGxsLmIyY2xvZ2luLmNvbS9hMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQvdjIuMC8iLCJleHAiOjE3MzMzNDcwMzEsIm5iZiI6MTczMzM0MzQzMSwibmFtZSI6InVua25vd24iLCJ0aWQiOiJhMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQiLCJpc19leHRlcm5hbCI6ZmFsc2UsImF6cGFjciI6IjEiLCJzdWIiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJvaWQiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJ2ZXIiOiIyLjAiLCJhenAiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpYXQiOjE3MzMzNDM0MzF9.kT5GezAoP0at2o1fRWCoPHV6hPBpxtCQoUNoayKs2PzFqGKJ6l6GNVE8YLOXJ5hOV8eLdxUpM6iTplv7FpkShKfYKmXiSTlCCa-xRo1O7O3IgDhV8Xjf_uARJD2_JNBUM6GHcV7MG-DU1Cr9nwWCn63HHgYP1-pW4HPOhT8gp2dFqrKI9vzMXIvj1xv5VDp5XJ2HMFUR_1wOctUORTzIqDlnFy_G65F4BV5_l-0f_2lzNnYe5ym00nlWuShK0-ndVpZq4NR6sre1_ZaWKC9VhuEGCT8H6n8rqvTLY4WH4sLaVE_vZikkMDtJW4eh58bgbmk0Pc6dyV8BSe6vY6f5yA', 'User-Agent' -> 'insomnia/10.2.0', 'Cookie' -> 'ARRAffinity=ad26f9a6bd8a60cc0a709ea5aba83deeee69ecdeb9e8ed99f43a1cd50f09889a; ARRAffinitySameSite=ad26f9a6bd8a60cc0a709ea5aba83deeee69ecdeb9e8ed99f43a1cd50f09889a'],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> sourceApiAlejo",
						"source(output(",
						"          ID as integer,",
						"          Fecha as date,",
						"          Valor as decimal(10,2),",
						"          Consecutivo as integer,",
						"          Indicador as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceBdXMLu",
						"source(output(",
						"          body as (numeroPagina as boolean, tamanoPagina as short, totalRegistros as short, valores as (activoDesde as string, fechaCreacion as string, fechaModificacion as string, idParametro as string, idVigenciaParametro as string, valor as double, vigenteDesde as string, vigenteHasta as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     headers: ['Authorization' -> 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImEyWm9IcVVBYkU2cHl6enR5RTZka1JGQmVoRTd2RFJERUEyRWloUGVaUWsiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpc3MiOiJodHRwczovL2IyY2JpYmNvbXB0cmFuc3NnZGxsLmIyY2xvZ2luLmNvbS9hMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQvdjIuMC8iLCJleHAiOjE3MzMzNDcwMzEsIm5iZiI6MTczMzM0MzQzMSwibmFtZSI6InVua25vd24iLCJ0aWQiOiJhMTgyNGIzMS1lZDkzLTQ1NGItOTJjYS1mNjE5MzA0ZDg4NmQiLCJpc19leHRlcm5hbCI6ZmFsc2UsImF6cGFjciI6IjEiLCJzdWIiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJvaWQiOiIyZjMxYmY5Yi02MjY5LTQwNjctYWU5MS1jNzhlMGJiM2Q1OWEiLCJ2ZXIiOiIyLjAiLCJhenAiOiI2ZjM1YzU2ZS0yYjY2LTQyNjEtOGU3Yi1hMmMwMTdmZWU2ZjMiLCJpYXQiOjE3MzMzNDM0MzF9.kT5GezAoP0at2o1fRWCoPHV6hPBpxtCQoUNoayKs2PzFqGKJ6l6GNVE8YLOXJ5hOV8eLdxUpM6iTplv7FpkShKfYKmXiSTlCCa-xRo1O7O3IgDhV8Xjf_uARJD2_JNBUM6GHcV7MG-DU1Cr9nwWCn63HHgYP1-pW4HPOhT8gp2dFqrKI9vzMXIvj1xv5VDp5XJ2HMFUR_1wOctUORTzIqDlnFy_G65F4BV5_l-0f_2lzNnYe5ym00nlWuShK0-ndVpZq4NR6sre1_ZaWKC9VhuEGCT8H6n8rqvTLY4WH4sLaVE_vZikkMDtJW4eh58bgbmk0Pc6dyV8BSe6vY6f5yA'],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> source1",
						"sourceBdXMLu filter(Indicador == 9) ~> ObtenerRegistrosIndicador9",
						"ObtenerRegistrosIndicador9 sort(desc(Fecha, true)) ~> OrdenarPorFecha",
						"OrdenarPorFecha window(desc(Fecha, true),",
						"     numero_fila = rowNumber()) ~> window1",
						"filter1 select(mapColumn(",
						"          Fecha",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"window1 filter(numero_fila == 1) ~> filter1",
						"sourceApiAlejo foldDown(unroll(body.valores),",
						"     mapColumn(",
						"          valores = body.valores",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(ultimo_dia_mes = lastDayOfMonth(toDate(valores.vigenteDesde)),",
						"          mes := toDate(valores.vigenteDesde)) ~> derivedColumn1",
						"derivedColumn1 filter(ultimo_dia_mes == toDate(valores.vigenteDesde) || (ultimo_dia_mes >= toDate(valores.vigenteDesde) && ultimo_dia_mes <= toDate(valores.vigenteHasta))) ~> filter2",
						"source1 foldDown(unroll(body.valores),",
						"     mapColumn(",
						"          valores = body.valores",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(ultimo_dia_mes = lastDayOfMonth(toDate(valores.vigenteDesde))) ~> derivedColumn2",
						"derivedColumn2 filter(ultimo_dia_mes == toDate(valores.vigenteDesde) || (ultimo_dia_mes >= toDate(valores.vigenteDesde) && ultimo_dia_mes <= toDate(valores.vigenteHasta))) ~> filter3",
						"createUrl call(mapColumn(",
						"          each(match(/* All input columns */ true()),",
						"               /* Input name */ $$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     output(",
						"          headers as [string,string],",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     format: 'rest',",
						"     store: 'restservice',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     headers = [Authorization -> Bearer 1],",
						"     httpMethod: 'GET',",
						"     rowRelativeUrl: 'path_url',",
						"     headerColumnName: 'headers',",
						"     bodyColumnName: 'body',",
						"     statusColumnName: 'status',",
						"     addResponseCode: true,",
						"     requestFormat: ['type' -> 'json'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> externalCall1",
						"filter3 derive(path_url = \"/Festivos/ultimo-dia-habil/CO/{month(ultimo_dia_mes)}/{year(ultimo_dia_mes)}\") ~> createUrl",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Dato as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Dato = ultimo_dia_mes",
						"     )) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Fecha as date,",
						"          Valor as decimal(10,2),",
						"          Consecutivo as integer,",
						"          Indicador as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"externalCall1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerLu')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerLuData')]",
				"[concat(variables('factoryId'), '/linkedServices/DiaHabil')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"valoresIndicadores": {},
									"valoresCopia": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T22:20:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineTCRM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceApiAlejo": {},
									"sourceBdXMLu": {},
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2024-12-05T22:21:00",
						"timeZone": "SA Pacific Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		}
	]
}